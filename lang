#! /usr/bin/env sh

# Usage:
#
# ./lang [s|d] parser1 parser2 …
#
# where:
#   [s|d]              = one of `s` or `d` for static or dynamic compilation,
#                        respectively
#   parser1, parser2 … = the names of the parsers to built from
#                        https://www.github.com/tree-sitter/tree-sitter-$parserX …

set -e
set -x

# Define the platform-specific:
#
# 1. static and dynamic extentions
# 2. the compilers

static="a"
case "$OSTYPE" in
  darwin*)
      CC=cc
      CXX=c++
      dynamic="dylib"
      ;;
  *)
      CC=gcc
      CXX=g++
      dynamic="so"
      ;;
esac

# Define:
#
# 1. the output extension
# 2. the libtree-sitter extension to delete (to force a static or dynamic
#    compilation)
# 3. the parsers
build=$1             # s = static | d = dynamic
extout=$dynamic      # output is always a dynamic lib
if [ "s" = $build ]
then
  extrem=$static 
else
  extrem=$dynamic
fi
shift
parsers=$@ # the names of the parsers

# ################################################ #
#          Clone and Build tree-sitter             #
# ################################################ #

tstag="0.20.8"
TSS="$PWD/tree-sitter" # Tree Sitter Source

if [ ! -d "$TSS" ]
then
  git clone https://github.com/tree-sitter/tree-sitter
  cd tree-sitter
  git checkout "tags/v$tstag"
  make
  rm libtree-sitter*.$extrem* 
  cd ..
fi

# Get tree-sitter-cli

if [ -n "$PLATFORM" ]
then
  arch=$(uname -m)
  wget "https://github.com/tree-sitter/tree-sitter/releases/download/v$tstag/tree-sitter-$PLATFORM.gz"
fi

# ################################################ #
#     Clone then Build Languages passed in args    #
# ################################################ #

for lang in "$parsers"
do

  GET=tree-sitter-$lang
  if [ -z "$PLATFORM" ]
  then
    OUT="$PWD/lib/libtree-sitter-$lang.$extout"
  else
    OUT="$PWD/lib/libtree-sitter-$lang-$PLATFORM.$extout"
  fi

  mkdir -p "lib"

  if [ ! -d $GET ]
  then
    git clone https://github.com/tree-sitter/$GET
    cd $GET
    git checkout "$(git describe --tags "$(git rev-list --tags --max-count=1)")"
    cd ..
  fi

  cd $GET/src
  set +e
  rm *.o
  rm *.$extout*
  set -e

  LDFLAGS="-L$TSS -lstdc++ -ltree-sitter"
  CFLAGS="-I/usr/include -I/usr/local/include -I/opt/include -I/opt/local/include -I$TSS/lib/include"
  set +e
  CFILES=$(ls *.c)
  CXXFILES=$(ls *.cc *.cpp *.cxx)
  set -e

  for i in $CFILES; do
    [ -f "$i" ] || continue
    $CC $CFLAGS -std=c99 -fPIC -c $i
  done

  for i in $CXXFILES; do
    [ -f "$i" ] || continue
    $CXX $CFLAGS -fPIC -c $i
  done

  if test -n "$CXXFILES"; then
    COMP=$CXX
  else
    COMP=$CC
  fi

  $COMP $LDFLAGS -shared *.o -o $OUT
done
