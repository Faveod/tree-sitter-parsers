#! /usr/bin/env bash

# Usage:
#
# ./lang [s|d] parser1 parser2 …
#
# where:
#   [s|d]              = one of `s` or `d` for static or dynamic compilation,
#                        respectively
#   parser1, parser2 … = the names of the parsers to built from
#                        https://www.github.com/tree-sitter/tree-sitter-$parserX …

set -e
set -x

# Define the platform-specific:
#
# 1. static and dynamic extentions
# 2. the compilers

static="a"
case "$OSTYPE" in
  darwin*)
      CC=cc
      CXX=c++
      dynamic="dylib"
      ;;
  *)
      CC=gcc
      CXX=g++
      dynamic="so"
      ;;
esac

# Define:
#
# 1. the output extension
# 2. the libtree-sitter extension to delete (to force a static or dynamic
#    compilation)
# 3. the parsers
build=$1             # s = static | d = dynamic
extout=$dynamic      # output is always a dynamic lib
if [ "s" = $build ]
then
  extrem=$static
else
  extrem=$dynamic
fi
shift

if [ $# -eq 0 ] || [ "$1" = "all" ]; then
    langs=$(cut -d ':' -f 1 ref)
else
    langs="$@"
fi

root=$(realpath "$PWD")
# ################################################ #
#          Clone and Build tree-sitter             #
# ################################################ #

# Get tree-sitter-cli

if [ -n "$PLATFORM" ]
then
  cli="tree-sitter-$PLATFORM"
  gz="$cli.gz"
  wget "https://github.com/tree-sitter/tree-sitter/releases/download/v$tstag/$gz"
  gunzip "$gz"
  chmod +x "$cli"
  cli="$root/$cli"
else
  cli="tree-sitter"
fi

tstag=${TREE_SITTER_VERSION:-$(\
  git                                                                               \
    -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' \
    --tags https://github.com/tree-sitter/tree-sitter '*.*.*'                       \
  | tail --lines=1                                                                  \
  | cut --delimiter='/' --fields=3                                                  \
  | sed -E 's/v([0-9]+\.[0-9]+)/\1/'                                                \
)}
TSS="$PWD/tree-sitter" # Tree Sitter Source

if [ ! -d "$TSS" ]
then
  git clone https://github.com/tree-sitter/tree-sitter
  cd tree-sitter
  git checkout "tags/v$tstag"
  make
  rm libtree-sitter*.$extrem*
  cd ..
fi

# ################################################ #
#     Clone then Build Languages passed in args    #
# ################################################ #

compile() {
  where=$(basename $PWD)
  if [ -z "$PLATFORM" ]
  then
    out="$root/lib/libtree-sitter-$where.$extout"
  else
    out="$root/lib/libtree-sitter-$where-$PLATFORM.$extout"
  fi
  # Regenerate the parser.
  # Check https://github.com/tree-sitter/tree-sitter/issues/2731
  echo "> $where: regenerating"
  $cli generate --
  # clean
  echo "> $where: cleaning"
  cd src
  set +e
  rm *.o
  rm *.$extout*
  set -e
  cd -

  echo "> $where: compiling"
  $cli build --output $out
}

for lang in $langs
do
  cd $root
  GET=tree-sitter-$lang

  mkdir -p "lib"

  if [ ! -d $GET ]
  then
    echo "> $lang: cloning"
    git clone https://github.com/tree-sitter/$GET $lang
  fi

  # Checkout the fixed ref.
  checkout=$(sed -n -e "/^$lang:/{s///;p;q;}" ref)
  cd $lang
  if [ -z "$checkout" ]
  then
    echo "> $lang: using HEAD. Are you sure?"
  else
    echo "> $lang: checking out $checkout"
    git checkout "$checkout"
  fi
  # Regenerate. See https://github.com/tree-sitter/tree-sitter/issues/2731
  if [ "$lang" = "php" ]; then
    cd php
    compile
    cd ../php_only
    compile
  else
    compile
  fi
done
